{
	"name": "External Objects Creation",
	"properties": {
		"content": {
			"query": "-- Sample Queries\n\n\n--  used to create the Credential\nCREATE DATABASE SCOPED CREDENTIAL storagekeycred\nWITH\n    IDENTITY='SHARED ACCESS SIGNATURE',  \n    SECRET = 'sv=xxx...';\n\n-- Create a external data source using the Above created credentials\nCREATE EXTERNAL DATA SOURCE secureFiles\nWITH (\n    LOCATION = 'https://mydatalake.blob.core.windows.net/data/secureFiles/'\n    CREDENTIAL = storagekeycred\n);\n\n\n-- create the file format\nCREATE EXTERNAL FILE FORMAT ParquetFormat\nWITH (\n        FORMAT_TYPE = PARQUET,\n        DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n    );\n\n\n-- create a External table using the Data Source Created\nCREATE EXTERNAL TABLE SpecialOrders\n    WITH (\n        -- details for storing results\n        LOCATION = 'special_orders/',\n        DATA_SOURCE = files,\n        FILE_FORMAT = ParquetFormat\n    )\nAS\nSELECT OrderID, CustomerName, OrderTotal\nFROM\n    OPENROWSET(\n        -- details for reading source files\n        BULK 'sales_orders/*.csv',\n        DATA_SOURCE = 'files', -- created Data source\n        FORMAT = 'ParquetFormat', -- Created file format\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS source_data\nWHERE OrderType = 'Special Order';\n\n\n-- Droping the External table\nDROP EXTERNAL TABLE SpecialOrders;\n\n/*\nexternal tables are a metadata abstraction over the files that contain the actual data. \nDropping an external table does not delete the underlying files.\n*/\n\n/*\nWhile you can run a CREATE EXTERNAL TABLE AS SELECT (CETAS) statement in a script whenever you need to transform data, \nit's good practice to encapsulate the transformation operation in stored procedure. \nThis approach can make it easier to operationalize data transformations by enabling you to supply parameters,\n retrieve outputs, and include additional logic in a single procedure call.\n */\n\n\n -- Stored procedure Syntax:\n\n /*\n\nCREATE PROCEDURE procedure_name\n@parameters \nAS\nBEGIN\n\n    # Statements to be executed\n\nEND\n\n\n */\n\n\n/*\n\nPROCEDURE USAGE AND ADVANTAGES:\n\nReduces client to server network traffic\nThe commands in a procedure are executed as a single batch of code; which can significantly reduce network traffic between the server and client because only the call to execute the procedure is sent across the network.\n\nProvides a security boundary\nMultiple users and client programs can perform operations on underlying database objects through a procedure, even if the users and programs don't have direct permissions on those underlying objects. The procedure controls what processes and activities are performed and protects the underlying database objects; eliminating the requirement to grant permissions at the individual object level and simplifies the security layers.\n\nEases maintenance\nAny changes in the logic or file system locations involved in the data transformation can be applied only to the stored procedure; without requiring updates to client applications or other calling functions.\n\nImproved performance\nStored procedures are compiled the first time they're executed, and the resulting execution plan is held in the cache and reused on subsequent runs of the same stored procedure. As a result, it takes less time to process the procedure.\n\n\n*/\n\n\n\n\n\n\n\n",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "master",
				"poolName": "Built-in"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}